{"hash":"e44d393270ba288daa20462940d15584a9b5e6d6","data":{"doc":{"title":"Technical guide","headings":[{"value":"Number Lookup API - Technical Guide"}],"subtitles":[{"depth":1,"value":"Number Lookup API - Technical Guide","anchor":"#number-lookup-api---technical-guide"},{"depth":2,"value":"Prerequisites","anchor":"#prerequisites"},{"depth":3,"value":"Required scope","anchor":"#required-scope"},{"depth":2,"value":"How to use the API","anchor":"#how-to-use-the-api"},{"depth":2,"value":"Flow","anchor":"#flow"},{"depth":2,"value":"Request / Response","anchor":"#request--response"},{"depth":3,"value":"Request","anchor":"#request"},{"depth":3,"value":"Response","anchor":"#response"},{"depth":3,"value":"Response, upstream error","anchor":"#response-upstream-error"},{"depth":2,"value":"Limitations for display name","anchor":"#limitations-for-display-name"},{"depth":2,"value":"Error handling","anchor":"#error-handling"},{"depth":2,"value":"Cache","anchor":"#cache"},{"depth":2,"value":"Recommended gRPC connection settings","anchor":"#recommended-grpc-connection-settings"},{"depth":3,"value":"Keep-Alive","anchor":"#keep-alive"},{"depth":2,"value":"Continue reading","anchor":"#continue-reading"},{"depth":2,"value":"Concepts","anchor":"#concepts"}],"roles":["THIRD_PARTY_DEVELOPER"],"hideWarning":null,"sourceExamples":[{"file":"examples/grpcurl/thirdpartydev/number-lookup/provider.sh","content":"#!/usr/bin/env bash\n\n# Download the API definition\ncurl -sL 'https://github.com/working-group-two/wgtwoapis/blob/master/image.bin?raw=true' -o proto/wgtwo.bin\n\n# Access token must be obtained via the client credentials flow\nACCESS_TOKEN=$(\n  curl -s -u $CLIENT_ID:$CLIENT_SECRET \\\n    --request POST \\\n    --url 'https://id.wgtwo.com/oauth2/token' \\\n    --header 'content-type: application/x-www-form-urlencoded' \\\n    --data grant_type=\"client_credentials\" \\\n    --data scope=\"lookup.number:read\" \\\n  | jq -r .access_token\n)\n\n# We send data to grpcurl via a PIPE, and receive data via stdout.\nPIPE=/tmp/provider-PIPE\nmkfifo $PIPE\nexec 3<> $PIPE\n\ncleanup() {\n    echo \"Cleaning up...\"\n    rm -f $PIPE\n    exec 3>&-\n    exit\n}\ntrap cleanup INT TERM EXIT\n\ngrpcurl \\\n   -H \"Authorization: Bearer $ACCESS_TOKEN\" \\\n   -protoset wgtwo.bin \\\n   -d @ \\\n   api.wgtwo.com:443 \\\n   wgtwo.lookup.v0.NumberLookupService/NumberLookup <&3 \\\n| while IFS= read -r LINE; do\n    # grpcurl sends output line by line, so we buffer until we have a valid JSON object.\n    BUFFER+=\"$LINE\"\n    if ! jq . >/dev/null 2>&1 <<<\"$BUFFER\"; then continue; fi\n\n    # Create a JSON response that includes the request and a dummy result.\n    RESPONSE_JSON=$(jq -c -n --argjson incoming_content \"$BUFFER\" \\\n      '{\n          number_lookup_request: $incoming_content,\n          result: {\n            name: \"John Doe\"\n          }\n      }'\n    )\n\n    # Send the response to grpcurl via the PIPE.\n    echo \"$RESPONSE_JSON\" > $PIPE\n\n    echo \"Sent response:\"\n    echo \"$RESPONSE_JSON\" | jq .\n    echo \"\"\n\n    # Clear the buffer.\n    BUFFER=\"\"\ndone\n"},{"file":"examples/kotlin/thirdpartydev/number-lookup/src/main/kotlin/com/wgtwo/examples/thirdpartydev/provider/Provider.kt","content":"package com.wgtwo.examples.thirdpartydev.numberlookup\n\nimport com.google.protobuf.util.Durations\nimport com.wgtwo.api.v0.lookup.NumberLookupProto.NumberLookupRequest\nimport com.wgtwo.api.v0.lookup.NumberLookupProto.NumberLookupResponse\nimport com.wgtwo.api.v0.lookup.NumberLookupServiceGrpcKt\nimport com.wgtwo.api.v0.lookup.cacheControl\nimport com.wgtwo.api.v0.lookup.numberLookupResponse\nimport com.wgtwo.api.v0.lookup.result\nimport com.wgtwo.auth.BearerTokenCallCredentials\nimport io.grpc.ManagedChannelBuilder\nimport kotlinx.coroutines.channels.Channel\nimport kotlinx.coroutines.delay\nimport kotlinx.coroutines.flow.catch\nimport kotlinx.coroutines.flow.collect\nimport kotlinx.coroutines.flow.flow\nimport kotlinx.coroutines.flow.onEach\nimport kotlinx.coroutines.flow.onStart\nimport kotlinx.coroutines.runBlocking\nimport java.util.concurrent.TimeUnit\nimport kotlin.time.Duration.Companion.seconds\n\nprivate val grpcChannel = ManagedChannelBuilder.forTarget(\"api.wgtwo.com:443\")\n    .keepAliveWithoutCalls(true)\n    .keepAliveTime(1, TimeUnit.MINUTES)\n    .keepAliveTimeout(10, TimeUnit.SECONDS)\n    .idleTimeout(1, TimeUnit.HOURS)\n    .build()\n\nprivate val stub = NumberLookupServiceGrpcKt.NumberLookupServiceCoroutineStub(grpcChannel)\n    .withCallCredentials(BearerTokenCallCredentials { \"MY ACCESS TOKEN\" })\n\nval phonebook = mapOf(\n    \"+4799999999\" to \"John Doe\",\n)\n\nsuspend fun startStream() {\n    val responseQueue = Channel<NumberLookupResponse>()\n\n    // Check queue to see if we have any responses and send them over the wire\n    val responseFlow = flow {\n        for (response in responseQueue) {\n            emit(response)\n        }\n    }\n    stub.numberLookup(responseFlow)\n        .onStart { println(\"Starting new stream\") }\n        .onEach { request: NumberLookupRequest ->\n            println(\"Got request for ${request.number.e164}\")\n            val displayName = phonebook.getOrDefault(request.number.e164, \"\")\n            val response = numberLookupResponse {\n                numberLookupRequest = request\n                result = result {\n                    name = displayName\n                }\n                cacheControl = cacheControl {\n                    maxAge = Durations.fromMinutes(60)\n                }\n            }\n            println(\"Sending response for ${response.numberLookupRequest.number.e164}: ${response.result.name}\")\n            responseQueue.send(response)\n        }\n        .catch { e ->\n            println(\"Got error: ${e.message} - Will reconnect in 1s\")\n            delay(1.seconds)\n        }\n        .collect()\n}\n\nfun main() = runBlocking {\n    // Run forever - if the stream fails we will reconnect\n    while (true) {\n        startStream()\n    }\n}\n"}]}},"context":{}}