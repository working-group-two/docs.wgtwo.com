{"hash":"d0a7f4800efb61a2874bf5bdc1a2fcd670bfe73b","data":{"doc":{"title":"Overview","headings":[{"value":"Number Lookup API"}],"subtitles":[{"depth":1,"value":"Number Lookup API","anchor":"#number-lookup-api"},{"depth":2,"value":"Intended audience","anchor":"#intended-audience"},{"depth":2,"value":"Usage","anchor":"#usage"},{"depth":2,"value":"Include display name as part of call setup","anchor":"#include-display-name-as-part-of-call-setup"},{"depth":3,"value":"Get number information from provider","anchor":"#get-number-information-from-provider"},{"depth":3,"value":"Show display name","anchor":"#show-display-name"},{"depth":2,"value":"Error handling","anchor":"#error-handling"},{"depth":2,"value":"Continue reading","anchor":"#continue-reading"}],"roles":["THIRD_PARTY_DEVELOPER"],"hideWarning":null,"sourceExamples":[{"file":"examples/kotlin/thirdpartydev/number-lookup/src/main/kotlin/com/wgtwo/examples/thirdpartydev/provider/Provider.kt","content":"package com.wgtwo.examples.thirdpartydev.numberlookup\n\nimport com.google.protobuf.util.Durations\nimport com.wgtwo.api.v0.lookup.NumberLookupProto.NumberLookupRequest\nimport com.wgtwo.api.v0.lookup.NumberLookupProto.NumberLookupResponse\nimport com.wgtwo.api.v0.lookup.NumberLookupServiceGrpcKt\nimport com.wgtwo.api.v0.lookup.cacheControl\nimport com.wgtwo.api.v0.lookup.numberLookupResponse\nimport com.wgtwo.api.v0.lookup.result\nimport com.wgtwo.auth.BearerTokenCallCredentials\nimport io.grpc.ManagedChannelBuilder\nimport kotlinx.coroutines.channels.Channel\nimport kotlinx.coroutines.delay\nimport kotlinx.coroutines.flow.catch\nimport kotlinx.coroutines.flow.collect\nimport kotlinx.coroutines.flow.flow\nimport kotlinx.coroutines.flow.onEach\nimport kotlinx.coroutines.flow.onStart\nimport kotlinx.coroutines.runBlocking\nimport java.util.concurrent.TimeUnit\nimport kotlin.time.Duration.Companion.seconds\n\nprivate val grpcChannel = ManagedChannelBuilder.forTarget(\"api.wgtwo.com:443\")\n    .keepAliveWithoutCalls(true)\n    .keepAliveTime(1, TimeUnit.MINUTES)\n    .keepAliveTimeout(10, TimeUnit.SECONDS)\n    .idleTimeout(1, TimeUnit.HOURS)\n    .build()\n\nprivate val stub = NumberLookupServiceGrpcKt.NumberLookupServiceCoroutineStub(grpcChannel)\n    .withCallCredentials(BearerTokenCallCredentials { \"MY ACCESS TOKEN\" })\n\nval phonebook = mapOf(\n    \"+4799999999\" to \"John Doe\",\n)\n\nsuspend fun startStream() {\n    val responseQueue = Channel<NumberLookupResponse>()\n\n    // Check queue to see if we have any responses and send them over the wire\n    val responseFlow = flow {\n        for (response in responseQueue) {\n            emit(response)\n        }\n    }\n    stub.numberLookup(responseFlow)\n        .onStart { println(\"Starting new stream\") }\n        .onEach { request: NumberLookupRequest ->\n            println(\"Got request for ${request.number.e164}\")\n            val displayName = phonebook.getOrDefault(request.number.e164, \"\")\n            val response = numberLookupResponse {\n                numberLookupRequest = request\n                result = result {\n                    name = displayName\n                }\n                cacheControl = cacheControl {\n                    maxAge = Durations.fromMinutes(60)\n                }\n            }\n            println(\"Sending response for ${response.numberLookupRequest.number.e164}: ${response.result.name}\")\n            responseQueue.send(response)\n        }\n        .catch { e ->\n            println(\"Got error: ${e.message} - Will reconnect in 1s\")\n            delay(1.seconds)\n        }\n        .collect()\n}\n\nfun main() = runBlocking {\n    // Run forever - if the stream fails we will reconnect\n    while (true) {\n        startStream()\n    }\n}\n"}]}},"context":{}}