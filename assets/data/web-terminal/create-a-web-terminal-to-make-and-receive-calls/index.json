{"hash":"e44d393270ba288daa20462940d15584a9b5e6d6","data":{"doc":{"title":"Create a Web Terminal to make and receive calls","headings":[{"value":"Make and receive WebRTC calls"}],"subtitles":[{"depth":1,"value":"Make and receive WebRTC calls","anchor":"#make-and-receive-webrtc-calls"},{"depth":2,"value":"Prerequisites","anchor":"#prerequisites"},{"depth":2,"value":"Overview","anchor":"#overview"},{"depth":2,"value":"The API","anchor":"#the-api"},{"depth":3,"value":"Example code","anchor":"#example-code"},{"depth":3,"value":"Common scenarios","anchor":"#common-scenarios"},{"depth":4,"value":"Initiating a call from a WebRTC terminal","anchor":"#initiating-a-call-from-a-webrtc-terminal"},{"depth":4,"value":"Receiving an incoming call from the core","anchor":"#receiving-an-incoming-call-from-the-core"},{"depth":4,"value":"Observing status","anchor":"#observing-status"},{"depth":4,"value":"Transferring call to Terminal","anchor":"#transferring-call-to-terminal"},{"depth":4,"value":"Transferring call to the mobile terminal","anchor":"#transferring-call-to-the-mobile-terminal"},{"depth":4,"value":"ICE","anchor":"#ice"},{"depth":4,"value":"Renegotiating SDP","anchor":"#renegotiating-sdp"},{"depth":2,"value":"Concepts","anchor":"#concepts"}],"roles":["THIRD_PARTY_DEVELOPER","OPERATOR"],"hideWarning":null,"sourceExamples":[{"file":"examples/kotlin/thirdpartydev/webterminal/src/main/kotlin/com/wgtwo/examples/thirdpartydev/webterminal/InitiateCall.kt","content":"package com.wgtwo.examples.thirdpartydev.webterminal\n\nimport com.wgtwo.api.common.Environment\nimport com.wgtwo.api.v0.common.PhoneNumberProto\nimport com.wgtwo.api.util.auth.Channels\nimport com.wgtwo.api.util.auth.BearerToken\nimport com.wgtwo.api.v0.webterminal.WebTerminalMessage\nimport com.wgtwo.api.v0.webterminal.WebTerminalServiceGrpcKt\nimport kotlinx.coroutines.ExperimentalCoroutinesApi\nimport kotlinx.coroutines.flow.catch\nimport kotlinx.coroutines.flow.collect\nimport kotlinx.coroutines.flow.flow\nimport kotlinx.coroutines.flow.onCompletion\nimport kotlinx.coroutines.runBlocking\nimport java.util.*\n\nprivate val channel = Channels.createChannel(Environment.SANDBOX)\nprivate val credentials =\n    BearerToken { \"MY_ACCESS_TOKEN\" } // Add your _client credentials_ access token (not user access token)\nprivate val stub = WebTerminalServiceGrpcKt.WebTerminalServiceCoroutineStub(channel)\n    .withCallCredentials(credentials)\n\n@ExperimentalCoroutinesApi\nfun main() {\n    // your calles's MSISDN goes here\n    val to = \"1234567890\"\n\n    // your SDP goes here\n    val sdp = \"\"\n\n    // Pipe() ignores callId, but it's mandatory for MultiPipe()\n    val callId = UUID.randomUUID().toString()\n\n    // building Offer\n    val toPhone = PhoneNumberProto.PhoneNumber.newBuilder().setE164(to).build()\n    val offer = WebTerminalMessage.newBuilder().apply {\n        offerBuilder.also {\n            it.msisdn = toPhone\n            it.sdp = sdp\n        }\n        this.callId = callId\n    }.build()\n\n    val requests = flow<WebTerminalMessage> {\n        emit(offer)\n    }\n\n    runBlocking {\n        stub.pipe(requests).onCompletion {\n            println(\"stream closed\")\n        }.catch { t ->\n            println(\"got error $t\")\n        }.collect {\n            println(\"got message $it\")\n        }\n    }\n}\n"},{"file":"examples/grpcurl/thirdpartydev/webterminal/initiatecall.sh","content":"# Access token must be obtained via the client credentials flow\ngrpcurl \\\n  -H \"Authorization: Bearer ${ACCESS_TOKEN}\"\\\n  -import-path . \\\n  -proto wgtwo/webterminal/v0/webterminal.proto \\\n  -d '\n  {\n      call_id = \"b5289ac4-d254-4d75-8b45-a8c5f5cf47b0\"\n      offer = {\n          sdp=\"\",\n          msisdn = {\n              e164 = \"+1234567890\"\n          }\n      }\n  }\n  ' \\\n  api.wgtwo.com:443 \\\n  wgtwo.webterminal.v0.WebTerminalService/Pipe\n"}]}},"context":{}}