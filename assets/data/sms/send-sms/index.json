{"hash":"e50e9b92e841bf62ca98666324019d79d6de2aa7","data":{"doc":{"title":"Send SMS","headings":[{"value":"How to send SMS"}],"subtitles":[{"depth":1,"value":"How to send SMS","anchor":"#how-to-send-sms"},{"depth":2,"value":"Overview","anchor":"#overview"},{"depth":3,"value":"Limitations on sms.send.to_subscriber","anchor":"#limitations-on-smssendto_subscriber"},{"depth":2,"value":"Send text SMS","anchor":"#send-text-sms"},{"depth":2,"value":"Send binary SMS","anchor":"#send-binary-sms"},{"depth":2,"value":"Concepts","anchor":"#concepts"}],"roles":["THIRD_PARTY_DEVELOPER","OPERATOR"],"hideWarning":null,"sourceExamples":[{"file":"examples/grpcurl/thirdpartydev/sms/send-text-sms.sh","content":"grpcurl \\\n  -H \"Authorization: Bearer ${ACCESS_TOKEN}\"\\\n  -import-path . \\\n  -proto wgtwo/sms/v0/sms.proto \\\n  -d '{\n        \"content\": \"Some important message\",\n        \"from_subscriber\": { \"e164\": \"+47xxxxxxxx\" },\n        \"to_e164\": { \"e164\": \"+47xxxxxxxx\" }\n      }' \\\n  api.wgtwo.com:443 \\\n  wgtwo.sms.v0.SmsService/SendTextFromSubscriber\n"},{"file":"examples/kotlin/thirdpartydev/sms/src/main/kotlin/com/wgtwo/examples/thirdpartydev/sms/SendTextSmsToSubscriber.kt","content":"package com.wgtwo.examples.thirdpartydev.sms\n\nimport com.wgtwo.api.common.Environment\nimport com.wgtwo.api.common.v0.PhoneNumberProto\nimport com.wgtwo.api.sms.v0.SmsProto\nimport com.wgtwo.api.sms.v0.SmsServiceGrpc\nimport com.wgtwo.api.util.auth.Channels\nimport com.wgtwo.api.util.auth.BearerToken\n\nprivate val channel = Channels.createChannel(Environment.PRODUCTION)\nprivate val credentials = BearerToken { \"MY_ACCESS_TOKEN\" } // Add your credentials\nprivate val stub = SmsServiceGrpc.newBlockingStub(channel).withCallCredentials(credentials)\n\nfun main() {\n    val message = with(SmsProto.SendTextToSubscriberRequest.newBuilder()) {\n        this.content = \"My SMS content\"\n        this.fromTextAddress = with(PhoneNumberProto.TextAddress.newBuilder()) {\n            this.textAddress = \"Test\"\n            build()\n        }\n        this.toSubscriber = with(PhoneNumberProto.PhoneNumber.newBuilder()) {\n            this.e164 = \"+47xxxxxxxx\"\n            build()\n        }\n        build()\n    }\n\n    val result = stub.sendTextToSubscriber(message)\n    if (result.status == SmsProto.SendResponse.SendStatus.SEND_OK) {\n        println(\"Successfully sent message\")\n    } else {\n        println(\"\"\"\n            Failure to send message:\n            status=${result.status}\n            description=${result.description}\"\n        \"\"\".trimIndent())\n    }\n}\n"},{"file":"examples/kotlin/thirdpartydev/sms/src/main/kotlin/com/wgtwo/examples/thirdpartydev/sms/SendBinarySmsToSubscriber.kt","content":"package com.wgtwo.examples.thirdpartydev.sms\n\nimport com.google.protobuf.ByteString\nimport com.wgtwo.api.common.Environment\nimport com.wgtwo.api.common.v0.PhoneNumberProto\nimport com.wgtwo.api.sms.v0.SmsProto\nimport com.wgtwo.api.sms.v0.SmsServiceGrpc\nimport com.wgtwo.api.util.auth.Channels\nimport com.wgtwo.api.util.auth.BearerToken\n\nprivate val channel = Channels.createChannel(Environment.PRODUCTION)\nprivate val credentials = BearerToken { \"MY_ACCESS_TOKEN\" } // Add your credentials\nprivate val stub = SmsServiceGrpc.newBlockingStub(channel).withCallCredentials(credentials)\n\nprivate fun hexStringToByteArray(s: String): ByteArray {\n    val len = s.length\n    val data = ByteArray(len / 2)\n    var i = 0\n    while (i < len) {\n        data[i / 2] = ((Character.digit(s[i], 16) shl 4) + Character.digit(s[i + 1], 16)).toByte()\n        i += 2\n    }\n    return data\n}\n\nfun main() {\n    val message = with(SmsProto.SendBinaryToSubscriberRequest.newBuilder()) {\n        this.content = ByteString.copyFrom(hexStringToByteArray(\"FFFF0000FFFF0000\"))\n        this.fromTextAddress = with(PhoneNumberProto.TextAddress.newBuilder()) {\n            this.textAddress = \"Test\"\n            build()\n        }\n        this.toSubscriber = with(PhoneNumberProto.PhoneNumber.newBuilder()) {\n            this.e164 = \"+47xxxxxxxx\"\n            build()\n        }\n        this.messageClass = SmsProto.SendBinaryToSubscriberRequest.MessageClass.CLASS3\n        build()\n    }\n\n    val result = stub.sendBinaryToSubscriber(message)\n    if (result.status == SmsProto.SendResponse.SendStatus.SEND_OK) {\n        println(\"Successfully sent message\")\n    } else {\n        println(\"\"\"\n            Failure to send message:\n            status=${result.status}\n            description=${result.description}\"\n        \"\"\".trimIndent())\n    }\n}\n"}]}},"context":{}}