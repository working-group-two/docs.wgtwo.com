{"hash":"023fb6ca7d216111198da383030d6e4d31dda8da","data":{"doc":{"title":"Set call forwarding","headings":[{"value":"How to set up call forwarding"}],"subtitles":[{"depth":1,"value":"How to set up call forwarding","anchor":"#how-to-set-up-call-forwarding"},{"depth":2,"value":"Overview","anchor":"#overview"},{"depth":2,"value":"Limitations","anchor":"#limitations"},{"depth":2,"value":"Forward all calls (unconditional) to another number","anchor":"#forward-all-calls-unconditional-to-another-number"},{"depth":2,"value":"Forward calls if busy or unavailable (conditional) to another number","anchor":"#forward-calls-if-busy-or-unavailable-conditional-to-another-number"},{"depth":2,"value":"Forward all calls (unconditional) to a trunk","anchor":"#forward-all-calls-unconditional-to-a-trunk"},{"depth":2,"value":"Forward calls if busy or unavailable or no answer (conditional) to default voicemail","anchor":"#forward-calls-if-busy-or-unavailable-or-no-answer-conditional-to-default-voicemail"},{"depth":2,"value":"Disable call forwarding","anchor":"#disable-call-forwarding"},{"depth":2,"value":"Concepts","anchor":"#concepts"}],"roles":["THIRD_PARTY_DEVELOPER","OPERATOR"],"hideWarning":null,"sourceExamples":[{"file":"examples/grpcurl/thirdpartydev/forwarding/unconditional_to_number.sh","content":"grpcurl \\\n  -H \"Authorization: Bearer ${ACCESS_TOKEN}\"\\\n  -import-path . \\\n  -proto wgtwo/callforward/v0/callforward.proto \\\n  -d '{\n        \"subscriber\": { \"e164\": \"+4672xxxxxxx\"},\n        \"unconditional\": {\n          \"forward_to_number\": { \"e164\": \"+4672xxxxxxx\"}\n        }\n      }' \\\n  api.wgtwo.com:443 \\\n  wgtwo.callforward.v0.CallForwardingService/SetToNumber\n"},{"file":"examples/kotlin/thirdpartydev/forwarding/src/main/kotlin/com/wgtwo/examples/thirdpartydev/forwarding/UnconditionalCallForwardingToNumber.kt","content":"package com.wgtwo.examples.thirdpartydev.forwarding\n\nimport com.wgtwo.api.v0.callforward.CallForwardingProto\nimport com.wgtwo.api.v0.callforward.CallForwardingServiceGrpc\nimport com.wgtwo.api.common.Environment\nimport com.wgtwo.api.v0.common.PhoneNumberProto\nimport com.wgtwo.api.util.auth.BearerToken\nimport com.wgtwo.api.util.auth.Channels\n\nprivate val channel = Channels.createChannel(Environment.PRODUCTION)\nprivate val credentials = BearerToken { \"MY_ACCESS_TOKEN\" } // Add your credentials\nprivate val stub = CallForwardingServiceGrpc.newBlockingStub(channel).withCallCredentials(credentials)\n\nfun main() {\n    val message = with(CallForwardingProto.NumberCallForwardingRequest.newBuilder()) {\n        this.subscriber = with(PhoneNumberProto.PhoneNumber.newBuilder()) {\n            this.e164 = \"+4672xxxxxxx\"\n            build()\n        }\n        this.unconditional = with(CallForwardingProto.Unconditional.newBuilder()) {\n            this.forwardToNumber = with(PhoneNumberProto.PhoneNumber.newBuilder()) {\n                this.e164 = \"+4672xxxxxxx\"\n                build()\n            }\n            build()\n        }\n        build()\n    }\n\n    val result = stub.setToNumber(message)\n    if (result.status == CallForwardingProto.CallForwardingResponse.Status.ACCEPTED) {\n        println(\"Successfully set call forwarding\")\n    } else {\n        println(\"\"\"\n            Failed to set call forwarding:\n            status=${result.status}\n            description=${result.errorMessage}\"\n        \"\"\".trimIndent())\n    }\n}\n"},{"file":"examples/grpcurl/thirdpartydev/forwarding/conditional_to_number.sh","content":"grpcurl \\\n  -H \"Authorization: Bearer ${ACCESS_TOKEN}\"\\\n  -import-path . \\\n  -proto wgtwo/callforward/v0/callforward.proto \\\n  -d '{\n        \"subscriber\": { \"e164\": \"+4672xxxxxxx\"},\n        \"conditional\": {\n          \"busy\": { \"e164\": \"+4672xxxxxxx\"},\n          \"unavailable\": { \"e164\": \"+4672xxxxxxx\"}\n        }\n      }' \\\n  api.wgtwo.com:443 \\\n  wgtwo.callforward.v0.CallForwardingService/SetToNumber\n"},{"file":"examples/kotlin/thirdpartydev/forwarding/src/main/kotlin/com/wgtwo/examples/thirdpartydev/forwarding/ConditionalCallForwardingToNumber.kt","content":"package com.wgtwo.examples.thirdpartydev.forwarding\n\nimport com.wgtwo.api.v0.callforward.CallForwardingProto\nimport com.wgtwo.api.v0.callforward.CallForwardingServiceGrpc\nimport com.wgtwo.api.common.Environment\nimport com.wgtwo.api.v0.common.PhoneNumberProto\nimport com.wgtwo.api.util.auth.BearerToken\nimport com.wgtwo.api.util.auth.Channels\n\nprivate val channel = Channels.createChannel(Environment.PRODUCTION)\nprivate val credentials = BearerToken { \"MY_ACCESS_TOKEN\" } // Add your credentials\nprivate val stub = CallForwardingServiceGrpc.newBlockingStub(channel).withCallCredentials(credentials)\n\nfun main() {\n    val message = with(CallForwardingProto.NumberCallForwardingRequest.newBuilder()) {\n        this.subscriber = with(PhoneNumberProto.PhoneNumber.newBuilder()) {\n            this.e164 = \"+4672xxxxxxx\"\n            build()\n        }\n        this.conditional = with(CallForwardingProto.Conditional.newBuilder()) {\n            this.busy = with(PhoneNumberProto.PhoneNumber.newBuilder()) {\n                this.e164 = \"+4672xxxxxxx\"\n                build()\n            }\n            this.unavailable = with(PhoneNumberProto.PhoneNumber.newBuilder()) {\n                this.e164 = \"+4672xxxxxxx\"\n                build()\n            }\n            build()\n        }\n        build()\n    }\n\n    val result = stub.setToNumber(message)\n    if (result.status == CallForwardingProto.CallForwardingResponse.Status.ACCEPTED) {\n        println(\"Successfully set call forwarding\")\n    } else {\n        println(\"\"\"\n            Failed to set call forwarding:\n            status=${result.status}\n            description=${result.errorMessage}\"\n        \"\"\".trimIndent())\n    }\n}\n"},{"file":"examples/grpcurl/thirdpartydev/forwarding/unconditional_to_trunk.sh","content":"grpcurl \\\n  -H \"Authorization: Bearer ${ACCESS_TOKEN}\"\\\n  -import-path . \\\n  -proto wgtwo/callforward/v0/callforward.proto \\\n  -d '{\n        \"subscriber\": { \"e164\": \"+4672xxxxxxx\"},\n        \"unconditional_trunk_forwarding\": {\n          \"forward_to_trunk\": { \"id\": \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"}\n        }\n      }' \\\n  api.wgtwo.com:443 \\\n  wgtwo.callforward.v0.CallForwardingService/SetToTrunk\n"},{"file":"examples/kotlin/thirdpartydev/forwarding/src/main/kotlin/com/wgtwo/examples/thirdpartydev/forwarding/UnconditionalCallForwardingToTrunk.kt","content":"package com.wgtwo.examples.thirdpartydev.forwarding\n\nimport com.wgtwo.api.v0.callforward.CallForwardingProto\nimport com.wgtwo.api.v0.callforward.CallForwardingServiceGrpc\nimport com.wgtwo.api.common.Environment\nimport com.wgtwo.api.v0.common.PhoneNumberProto\nimport com.wgtwo.api.util.auth.BearerToken\nimport com.wgtwo.api.util.auth.Channels\n\nprivate val channel = Channels.createChannel(Environment.PRODUCTION)\nprivate val credentials = BearerToken { \"MY_ACCESS_TOKEN\" } // Add your credentials\nprivate val stub = CallForwardingServiceGrpc.newBlockingStub(channel).withCallCredentials(credentials)\n\nfun main() {\n    val message = with(CallForwardingProto.TrunkCallForwardingRequest.newBuilder()) {\n        this.subscriber = with(PhoneNumberProto.PhoneNumber.newBuilder()) {\n            this.e164 = \"+4672xxxxxxx\"\n            build()\n        }\n        this.unconditionalTrunkForwarding = with(CallForwardingProto.UnconditionalTrunkForwarding.newBuilder()) {\n            this.forwardToTrunk = with(CallForwardingProto.Trunk.newBuilder()) {\n                this.id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n                build()\n            }\n            build()\n        }\n        build()\n    }\n\n    val result = stub.setToTrunk(message)\n    if (result.status == CallForwardingProto.CallForwardingResponse.Status.ACCEPTED) {\n        println(\"Successfully set call forwarding\")\n    } else {\n        println(\"\"\"\n            Failed to set call forwarding:\n            status=${result.status}\n            description=${result.errorMessage}\"\n        \"\"\".trimIndent())\n    }\n}\n"},{"file":"examples/grpcurl/thirdpartydev/forwarding/conditional_to_voicemail.sh","content":"grpcurl \\\n  -H \"Authorization: Bearer ${ACCESS_TOKEN}\"\\\n  -import-path . \\\n  -proto wgtwo/callforward/v0/callforward.proto \\\n  -d '{\n        \"subscriber\": { \"e164\": \"+4672xxxxxxx\"},\n        \"conditional\": {\n          \"busy\": { \"e164\": \"+4672xxxxxxx\"},\n          \"unavailable\": { \"e164\": \"+4672xxxxxxx\"},\n          \"no_reply\": { \"e164\": \"+4672xxxxxxx\"}\n        }\n      }' \\\n  api.wgtwo.com:443 \\\n  wgtwo.callforward.v0.CallForwardingService/SetToVoicemail\n"},{"file":"examples/kotlin/thirdpartydev/forwarding/src/main/kotlin/com/wgtwo/examples/thirdpartydev/forwarding/ConditionalCallForwardingToVoicemail.kt","content":"package com.wgtwo.examples.thirdpartydev.forwarding\n\nimport com.wgtwo.api.v0.callforward.CallForwardingProto\nimport com.wgtwo.api.v0.callforward.CallForwardingServiceGrpc\nimport com.wgtwo.api.common.Environment\nimport com.wgtwo.api.v0.common.PhoneNumberProto\nimport com.wgtwo.api.util.auth.BearerToken\nimport com.wgtwo.api.util.auth.Channels\n\nprivate val channel = Channels.createChannel(Environment.PRODUCTION)\nprivate val credentials = BearerToken { \"MY_ACCESS_TOKEN\" } // Add your credentials\nprivate val stub = CallForwardingServiceGrpc.newBlockingStub(channel).withCallCredentials(credentials)\n\nfun main() {\n    val message = with(CallForwardingProto.VoicemailCallForwardingRequest.newBuilder()) {\n        this.subscriber = with(PhoneNumberProto.PhoneNumber.newBuilder()) {\n            this.e164 = \"+4672xxxxxxx\"\n            build()\n        }\n        build()\n    }\n\n    val result = stub.setToVoicemail(message)\n    if (result.status == CallForwardingProto.CallForwardingResponse.Status.ACCEPTED) {\n        println(\"Successfully set call forwarding\")\n    } else {\n        println(\"\"\"\n            Failed to set call forwarding:\n            status=${result.status}\n            description=${result.errorMessage}\"\n        \"\"\".trimIndent())\n    }\n}\n"},{"file":"examples/grpcurl/thirdpartydev/forwarding/disable.sh","content":"grpcurl \\\n  -H \"Authorization: Bearer ${ACCESS_TOKEN}\"\\\n  -import-path . \\\n  -proto wgtwo/callforward/v0/callforward.proto \\\n  -d '{\n        \"subscriber\": { \"e164\": \"+4672xxxxxxx\"}\n      }' \\\n  api.wgtwo.com:443 \\\n  wgtwo.callforward.v0.CallForwardingService/Disable\n"},{"file":"examples/kotlin/thirdpartydev/forwarding/src/main/kotlin/com/wgtwo/examples/thirdpartydev/forwarding/DisableCallForwarding.kt","content":"package com.wgtwo.examples.thirdpartydev.forwarding\n\nimport com.wgtwo.api.v0.callforward.CallForwardingProto\nimport com.wgtwo.api.v0.callforward.CallForwardingServiceGrpc\nimport com.wgtwo.api.common.Environment\nimport com.wgtwo.api.v0.common.PhoneNumberProto\nimport com.wgtwo.api.util.auth.BearerToken\nimport com.wgtwo.api.util.auth.Channels\n\nprivate val channel = Channels.createChannel(Environment.PRODUCTION)\nprivate val credentials = BearerToken { \"MY_ACCESS_TOKEN\" } // Add your credentials\nprivate val stub = CallForwardingServiceGrpc.newBlockingStub(channel).withCallCredentials(credentials)\n\nfun main() {\n    val message = with(CallForwardingProto.DisableCallForwardingRequest.newBuilder()) {\n        this.subscriber = with(PhoneNumberProto.PhoneNumber.newBuilder()) {\n            this.e164 = \"+4672xxxxxxx\"\n            build()\n        }\n        build()\n    }\n\n    val result = stub.disable(message)\n    if (result.status == CallForwardingProto.CallForwardingResponse.Status.ACCEPTED) {\n        println(\"Successfully disabled call forwarding\")\n    } else {\n        println(\"\"\"\n            Failure to disable call forwarding:\n            status=${result.status}\n            description=${result.errorMessage}\"\n        \"\"\".trimIndent())\n    }\n}\n"}]}},"context":{}}