{"hash":"eef7ca60f52631cc5336775944db991641f118ec","data":{"doc":{"title":"Get started","headings":[{"value":"Get started"}],"subtitles":[{"depth":1,"value":"Get started","anchor":"#get-started"},{"depth":2,"value":"Download proto descriptions","anchor":"#download-proto-descriptions"},{"depth":2,"value":"Set up gRPCurl","anchor":"#set-up-grpcurl"},{"depth":2,"value":"Sandbox environment","anchor":"#sandbox-environment"},{"depth":3,"value":"Setup event streaming","anchor":"#setup-event-streaming"},{"depth":3,"value":"Send SMS","anchor":"#send-sms"},{"depth":3,"value":"Explore the API","anchor":"#explore-the-api"},{"depth":2,"value":"Production environment","anchor":"#production-environment"},{"depth":3,"value":"Create OAuth 2.0 client","anchor":"#create-oauth-20-client"},{"depth":3,"value":"Get access token (using the Client Credentials Flow)","anchor":"#get-access-token-using-the-client-credentials-flow"},{"depth":3,"value":"Setup stream listening for events","anchor":"#setup-stream-listening-for-events"},{"depth":4,"value":"Example code for Go","anchor":"#example-code-for-go"},{"depth":5,"value":"Download and run code example","anchor":"#download-and-run-code-example"},{"depth":2,"value":"What's next?","anchor":"#whats-next"},{"depth":3,"value":"I am building a subscriber product","anchor":"#i-am-building-a-subscriber-product"},{"depth":3,"value":"I am building an operator product","anchor":"#i-am-building-an-operator-product"},{"depth":2,"value":"Summary","anchor":"#summary"}],"roles":["THIRD_PARTY_DEVELOPER","OPERATOR"],"hideWarning":null,"sourceExamples":[{"file":"examples/go/events/main.go","content":"package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/golang/protobuf/jsonpb\"\n\t\"github.com/google/uuid\"\n\twgtwoEvents \"github.com/working-group-two/wgtwoapis/wgtwo/events/v0\"\n\t\"golang.org/x/oauth2/clientcredentials\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/credentials/oauth\"\n\t\"google.golang.org/grpc/status\"\n\t\"google.golang.org/protobuf/types/known/durationpb\"\n\t\"io\"\n\t\"os\"\n\t\"time\"\n)\n\nvar marshaler = jsonpb.Marshaler{}\n\nfunc main() {\n\tclientCredentialsConfig := &clientcredentials.Config{\n\t\tClientID:     os.Getenv(\"CLIENT_ID\"),\n\t\tClientSecret: os.Getenv(\"CLIENT_SECRET\"),\n\t\tScopes: []string{\n\t\t\t\"events.sms.subscribe\",\n\t\t},\n\t\tTokenURL: \"https://id.wgtwo.com/oauth2/token\",\n\t}\n\n\tconn, err := grpc.Dial(\n\t\t\"api.wgtwo.com:443\",\n\t\tgrpc.WithTransportCredentials(credentials.NewClientTLSFromCert(nil, \"\")),\n\t\tgrpc.WithPerRPCCredentials(\n\t\t\toauth.TokenSource{\n\t\t\t\tTokenSource: clientCredentialsConfig.TokenSource(context.Background()),\n\t\t\t},\n\t\t),\n\t)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer conn.Close()\n\n\tclient := wgtwoEvents.NewEventsServiceClient(conn)\n\trequest := &wgtwoEvents.SubscribeEventsRequest{\n\t\tType:          []wgtwoEvents.EventType{wgtwoEvents.EventType_SMS_EVENT},\n\t\tStartPosition: &wgtwoEvents.SubscribeEventsRequest_StartAtOldestPossible{},\n\t\tClientId:      uuid.New().String(),\n\t\tQueueName:     \"test\",\n\t\tDurableName:   \"test\",\n\t\tMaxInFlight:   10,\n\t\tManualAck: &wgtwoEvents.ManualAckConfig{\n\t\t\tEnable:  true,\n\t\t\tTimeout: durationpb.New(10 * time.Second),\n\t\t},\n\t}\n\n\tstream, err := client.Subscribe(context.TODO(), request)\n\n\tif err != nil || stream == nil {\n\t\tfmt.Println(\"Could not create stream. Invalid credentials perhaps?\")\n\t\treturn\n\t}\n\n\tfor {\n\t\tfmt.Println(\"Starting stream...\")\n\t\tresponse, err := stream.Recv()\n\t\tif err == io.EOF {\n\t\t\tbreak\n\t\t} else if err != nil {\n\t\t\terrStatus, _ := status.FromError(err)\n\t\t\tfmt.Printf(\"Could not get response: %s\\n\", errStatus.Code())\n\t\t\tbreak\n\t\t}\n\t\tdisplayEvent(response)\n\t\tack(client, response.Event)\n\n\t}\n}\n\nfunc displayEvent(response *wgtwoEvents.SubscribeEventsResponse) {\n\tjson, err := marshaler.MarshalToString(response)\n\tif err != nil {\n\t\tfmt.Println(\"Could not parse response\")\n\t} else {\n\t\tfmt.Println(json)\n\t}\n}\n\nfunc ack(client wgtwoEvents.EventsServiceClient, event *wgtwoEvents.Event) {\n\tackCtx, cancel := context.WithTimeout(context.Background(), time.Second*10)\n\tdefer cancel()\n\t_, err := client.Ack(ackCtx, &wgtwoEvents.AckRequest{Inbox: event.Metadata.AckInbox, Sequence: event.Metadata.Sequence})\n\tif err != nil {\n\t\tfmt.Println(\"Could not ack message...\")\n\t}\n}\n"}]}},"context":{}}