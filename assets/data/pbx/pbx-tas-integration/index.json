{"hash":"9e5a68141a58038d218668c7132e002435b58ebe","data":{"doc":{"title":"PBX/TAS integration","headings":[{"value":"Plug your SIP-enabled PBX or TAS into the call path"}],"subtitles":[{"depth":1,"value":"Plug your SIP-enabled PBX or TAS into the call path","anchor":"#plug-your-sip-enabled-pbx-or-tas-into-the-call-path"},{"depth":2,"value":"Prerequisites","anchor":"#prerequisites"},{"depth":2,"value":"Overview","anchor":"#overview"},{"depth":2,"value":"The API","anchor":"#the-api"},{"depth":3,"value":"Messages","anchor":"#messages"},{"depth":3,"value":"Registration types","anchor":"#registration-types"},{"depth":4,"value":"Fork/Loop","anchor":"#forkloop"},{"depth":4,"value":"Fallback","anchor":"#fallback"},{"depth":3,"value":"Example code","anchor":"#example-code"},{"depth":2,"value":"Concepts","anchor":"#concepts"}],"roles":["THIRD_PARTY_DEVELOPER","OPERATOR"],"hideWarning":null,"sourceExamples":[{"file":"examples/kotlin/thirdpartydev/sipbreakout/src/main/kotlin/com/wgtwo/examples/thirdpartydev/sipbreakout/sipbreakout.kt","content":"package com.wgtwo.examples.thirdpartydev.sipbreakout;\n\nimport com.wgtwo.api.common.Environment\nimport com.wgtwo.api.v0.sipbreakout.DeleteRegistrationRequest\nimport com.wgtwo.api.v0.sipbreakout.Registration\nimport com.wgtwo.api.v0.sipbreakout.RouteType\nimport com.wgtwo.api.v0.sipbreakout.SipBreakoutServiceGrpcKt\nimport com.wgtwo.api.v0.sipbreakout.UpsertRegistrationRequest\nimport com.wgtwo.api.util.auth.BearerToken\nimport com.wgtwo.api.util.auth.Channels\nimport io.grpc.StatusException\nimport kotlinx.coroutines.ExperimentalCoroutinesApi\nimport kotlinx.coroutines.runBlocking\n\nprivate val channel = Channels.createChannel(Environment.SANDBOX)\nprivate val credentials =\n    BearerToken { \"MY_ACCESS_TOKEN\" } // Add your _client credentials_ access token (not user access token)\nprivate val stub = SipBreakoutServiceGrpcKt.SipBreakoutServiceCoroutineStub(channel)\n    .withCallCredentials(credentials)\n\n@ExperimentalCoroutinesApi\nfun main() {\n\n    val registration = Registration.newBuilder().apply {\n        sipUri = \"sips:example.com:8888\"\n        mobileOriginatingPrefix = \"11\"\n        mobileTerminatingPrefix = \"22\"\n        routeType = RouteType.ROUTE_TYPE_LOOP\n    }.build()\n\n    // building RegistrationRequest\n    val upsertRequest = UpsertRegistrationRequest.newBuilder()\n        .setRegistration(registration)\n        .build()\n    val deleteRequest = DeleteRegistrationRequest.newBuilder()\n        .setRegistration(registration)\n        .build()\n\n    runBlocking {\n        try {\n            val upsertRsesponse = stub.upsertRegistration(upsertRequest)\n            println(\"upsert: got response $upsertRsesponse\")\n\n            val deleteResponse = stub.deleteRegistration(deleteRequest)\n            println(\"delete: got response $deleteResponse\")\n        } catch (e : StatusException) {\n            println(\"got error $e\")\n        }\n    }\n\n}\n"},{"file":"examples/grpcurl/thirdpartydev/sipbreakout/register.sh","content":"# Access token must be obtained via the client credentials flow\ngrpcurl -protoset wgtwo.bin \\\n  -d '\n  {\n      \"registration\": {\n          \"mobile_originating_prefix\": \"11\",\n          \"mobile_terminating_prefix\": \"22\",\n          \"sip_uri\": \"sips:example.com:8888\",\n          \"route_type\": \"ROUTE_TYPE_LOOP\"\n      }\n  }\n  ' \\\n  api.wgtwo.com:443 wgtwo.sipbreakout.v0.SipBreakoutService/UpsertRegistration\n"}]}},"context":{}}