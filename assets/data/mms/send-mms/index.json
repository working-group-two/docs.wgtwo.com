{"hash":"023fb6ca7d216111198da383030d6e4d31dda8da","data":{"doc":{"title":"Send MMS","headings":[{"value":"How to send MMS"}],"subtitles":[{"depth":1,"value":"How to send MMS","anchor":"#how-to-send-mms"},{"depth":2,"value":"Overview","anchor":"#overview"},{"depth":3,"value":"Limitations on mms.send.to_subscriber","anchor":"#limitations-on-mmssendto_subscriber"},{"depth":2,"value":"Send audio MMS","anchor":"#send-audio-mms"},{"depth":2,"value":"Concepts","anchor":"#concepts"}],"roles":["THIRD_PARTY_DEVELOPER","OPERATOR"],"hideWarning":null,"sourceExamples":[{"file":"examples/kotlin/thirdpartydev/mms/src/main/kotlin/com/wgtwo/examples/thirdpartydev/mms/SendAudioToSubscriber.kt","content":"package com.wgtwo.examples.thirdpartydev.mms\n\nimport com.google.protobuf.ByteString\nimport com.wgtwo.api.common.Environment\nimport com.wgtwo.api.v0.common.PhoneNumberProto\nimport com.wgtwo.api.v0.mms.MmsProto\nimport com.wgtwo.api.v0.mms.MmsServiceGrpc\nimport com.wgtwo.api.util.auth.Channels\nimport com.wgtwo.api.util.auth.BearerToken\n\nprivate val credentials = BearerToken { \"MY_ACCESS_TOKEN\" } // Add your credentials\nprivate val phoneNumber = \"+47xxxxxxxx\" // Target your desired user\n\nprivate val channel = Channels.createChannel(Environment.PRODUCTION)\nprivate val stub = MmsServiceGrpc.newBlockingStub(channel).withCallCredentials(credentials)\n\nfun main() {\n    val message = with(MmsProto.SendMessageToSubscriberRequest.newBuilder()) {\n        val audioContent = with(MmsProto.AudioContent.newBuilder()) {\n            this.wav = ByteString.readFrom(\n                    this::class.java.classLoader.getResource(\"test.wav\")\n                        .openStream()\n                )\n            build()\n        }\n        addMessageContent(MmsProto.MessageContent.newBuilder().setAudio(audioContent))\n        this.fromTextAddress = with(PhoneNumberProto.TextAddress.newBuilder()) {\n            this.textAddress = \"Test\"\n            build()\n        }\n        this.toSubscriber = with(PhoneNumberProto.PhoneNumber.newBuilder()) {\n            this.e164 = phoneNumber\n            build()\n        }\n        build()\n    }\n\n    val result = stub.sendMessageToSubscriber(message)\n    if (result.status == MmsProto.SendResponse.SendStatus.SEND_OK) {\n        println(\"Successfully sent message.\")\n    } else {\n        println(\n            \"\"\"\n            Failure to send message:\n            request ID= ${result.requestId}\n            status=${result.status}\n            description=${result.description}\"\n        \"\"\".trimIndent()\n        )\n    }\n}\n"}]}},"context":{}}