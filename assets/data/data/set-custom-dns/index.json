{"hash":"90e275c692863ed841d354ab717c29eb192f9989","data":{"doc":{"title":"Set custom DNS","headings":[{"value":"How to set a custom DNS for a data connection"}],"subtitles":[{"depth":1,"value":"How to set a custom DNS for a data connection","anchor":"#how-to-set-a-custom-dns-for-a-data-connection"},{"depth":2,"value":"Overview","anchor":"#overview"},{"depth":2,"value":"Set custom DNS","anchor":"#set-custom-dns"},{"depth":2,"value":"Get current custom DNS config","anchor":"#get-current-custom-dns-config"},{"depth":2,"value":"Clear custom DNS config","anchor":"#clear-custom-dns-config"},{"depth":2,"value":"Concepts","anchor":"#concepts"}],"roles":["THIRD_PARTY_DEVELOPER","OPERATOR"],"hideWarning":null,"sourceExamples":[{"file":"examples/grpcurl/thirdpartydev/data/set-dns.sh","content":"grpcurl \\\n  -H \"Authorization: Bearer ${ACCESS_TOKEN}\"\\\n  -import-path . \\\n  -proto wgtwo/data/v0/data.proto \\\n  -d '{\n        \"subscriber\": { \"e164\": \"+4672xxxxxxx\"},\n        \"dnsV4\": { \n            \"primary\": { \"ipv4\": \"1.0.0.2\" },\n            \"secondary\": { \"ipv4\": \"1.1.1.1\" }\n        },\n        \"dnsV6\": { \n            \"primary\": { \"ipv6\": \"2606:4700:4700::1111\" }\n        }\n      }' \\\n  api.wgtwo.com:443 \\\n  wgtwo.data.v0.DataService/SetCustomDns\n"},{"file":"examples/kotlin/thirdpartydev/data/src/main/kotlin/com/wgtwo/examples/thirdpartydev/data/SetCustomDns.kt","content":"package com.wgtwo.examples.thirdpartydev.data\n\nimport com.wgtwo.api.common.Environment\nimport com.wgtwo.api.common.v0.PhoneNumberProto\nimport com.wgtwo.api.data.v0.DataProto\nimport com.wgtwo.api.data.v0.DataServiceGrpc\nimport com.wgtwo.api.util.auth.Clients\nimport com.wgtwo.api.util.auth.AccessToken\n\nprivate val channel = Clients.createChannel(Environment.PROD)\nprivate val credentials = AccessToken(\"ACCESS_TOKEN\") // Add your credentials\nprivate val stub = DataServiceGrpc.newBlockingStub(channel).withCallCredentials(credentials)\n\nfun main() {\n    val message = with(DataProto.SetCustomDnsRequest.newBuilder()) {\n        this.subscriber = with(PhoneNumberProto.PhoneNumber.newBuilder()) {\n            this.e164 = \"+4672xxxxxxx\"\n            build()\n        }\n        this.dnsV4 = with(DataProto.IpV4Pair.newBuilder()) {\n            primary = with(DataProto.IpAddressV4.newBuilder()) {\n                ipv4 = \"1.1.1.1\"\n                build()\n            }\n            secondary = with(DataProto.IpAddressV4.newBuilder()) {\n                ipv4 = \"1.0.0.1\"\n                build()\n            }\n            build()\n        }\n        this.dnsV6 = with(DataProto.IpV6Pair.newBuilder()) {\n            primary = with(DataProto.IpAddressV6.newBuilder()) {\n                ipv6 = \"2606:4700:4700::1111\"\n                build()\n            }\n            secondary = with(DataProto.IpAddressV6.newBuilder()) {\n                ipv6 = \"2606:4700:4700::1001\"\n                build()\n            }\n            build()\n        }\n        build()\n    }\n\n    val result = stub.setCustomDns(message)\n    if (result.status == DataProto.CustomDnsResponse.Status.ACCEPTED) {\n        println(\"Successfully set DNS config\")\n    } else {\n        println(\"\"\"\n            Failure to set DNS config:\n            status=${result.status}\n            description=${result.errorMessage}\"\n        \"\"\".trimIndent())\n    }\n}\n"},{"file":"examples/grpcurl/thirdpartydev/data/get-dns.sh","content":"grpcurl \\\n  -H \"Authorization: Bearer ${ACCESS_TOKEN}\"\\\n  -import-path . \\\n  -proto wgtwo/data/v0/data.proto \\\n  -d '{\n        \"subscriber\": { \"e164\": \"+4672xxxxxxx\"}\n      }' \\\n  api.wgtwo.com:443 \\\n  wgtwo.data.v0.DataService/GetCustomDns\n"},{"file":"examples/kotlin/thirdpartydev/data/src/main/kotlin/com/wgtwo/examples/thirdpartydev/data/GetCustomDns.kt","content":"package com.wgtwo.examples.thirdpartydev.data\n\nimport com.wgtwo.api.common.Environment\nimport com.wgtwo.api.common.v0.PhoneNumberProto\nimport com.wgtwo.api.data.v0.DataProto\nimport com.wgtwo.api.data.v0.DataServiceGrpc\nimport com.wgtwo.api.util.auth.Clients\nimport com.wgtwo.api.util.auth.AccessToken\n\nprivate val channel = Clients.createChannel(Environment.PROD)\nprivate val credentials = AccessToken(\"ACCESS_TOKEN\") // Add your credentials\nprivate val stub = DataServiceGrpc.newBlockingStub(channel).withCallCredentials(credentials)\n\nfun main() {\n    val message = with(DataProto.GetCustomDnsRequest.newBuilder()) {\n        this.subscriber = with(PhoneNumberProto.PhoneNumber.newBuilder()) {\n            this.e164 = \"+4672xxxxxxx\"\n            build()\n        }\n        build()\n    }\n\n    val result = stub.getCustomDns(message)\n    println(\"\"\"\n        Got DNS config:\n        IpV4 primary=${result.dnsV4.primary.ipv4}\n        IpV4 secondary=${result.dnsV4.secondary.ipv4}\n        IpV6 primary=${result.dnsV6.primary.ipv6}\n        IpV6 secondary=${result.dnsV6.secondary.ipv6}\n    \"\"\".trimIndent())\n}\n"},{"file":"examples/grpcurl/thirdpartydev/data/clear-dns.sh","content":"grpcurl \\\n  -H \"Authorization: Bearer ${ACCESS_TOKEN}\"\\\n  -import-path . \\\n  -proto wgtwo/data/v0/data.proto \\\n  -d '{\n        \"subscriber\": { \"e164\": \"+4672xxxxxxx\"}\n      }' \\\n  api.wgtwo.com:443 \\\n  wgtwo.data.v0.DataService/ClearCustomDns\n"},{"file":"examples/kotlin/thirdpartydev/data/src/main/kotlin/com/wgtwo/examples/thirdpartydev/data/ClearCustomDns.kt","content":"package com.wgtwo.examples.thirdpartydev.data\n\nimport com.wgtwo.api.common.Environment\nimport com.wgtwo.api.common.v0.PhoneNumberProto\nimport com.wgtwo.api.data.v0.DataProto\nimport com.wgtwo.api.data.v0.DataServiceGrpc\nimport com.wgtwo.api.util.auth.Clients\nimport com.wgtwo.api.util.auth.AccessToken\n\nprivate val channel = Clients.createChannel(Environment.PROD)\nprivate val credentials = AccessToken(\"ACCESS_TOKEN\") // Add your credentials\nprivate val stub = DataServiceGrpc.newBlockingStub(channel).withCallCredentials(credentials)\n\nfun main() {\n    val message = with(DataProto.ClearCustomDnsRequest.newBuilder()) {\n        this.subscriber = with(PhoneNumberProto.PhoneNumber.newBuilder()) {\n            this.e164 = \"+4672xxxxxxx\"\n            build()\n        }\n        build()\n    }\n\n    val result = stub.clearCustomDns(message)\n    if (result.status == DataProto.CustomDnsResponse.Status.ACCEPTED) {\n        println(\"Successfully cleared DNS config\")\n    } else {\n        println(\"\"\"\n            Failure to clear DNS config:\n            status=${result.status}\n            description=${result.errorMessage}\"\n        \"\"\".trimIndent())\n    }\n}\n"}]}},"context":{}}