{"hash":"31e3ef0335299a3070ff62b761385b732cbb434b","data":{"doc":{"title":"List, play, delete and configure voicemails","headings":[{"value":"List, play, delete and configure voicemails"}],"subtitles":[{"depth":1,"value":"List, play, delete and configure voicemails","anchor":"#list-play-delete-and-configure-voicemails"},{"depth":2,"value":"Overview","anchor":"#overview"},{"depth":2,"value":"List voicemails","anchor":"#list-voicemails"},{"depth":2,"value":"Play voicemail","anchor":"#play-voicemail"},{"depth":2,"value":"Mark voicemail as read","anchor":"#mark-voicemail-as-read"},{"depth":2,"value":"Delete voicemail","anchor":"#delete-voicemail"},{"depth":2,"value":"Reset voicemail greeting","anchor":"#reset-voicemail-greeting"},{"depth":2,"value":"Concepts","anchor":"#concepts"}],"roles":["THIRD_PARTY_DEVELOPER","OPERATOR"],"hideWarning":null,"sourceExamples":[{"file":"examples/grpcurl/thirdpartydev/voicemail/list-voicemail.sh","content":"grpcurl \\\n  -H \"Authorization: Bearer ${ACCESS_TOKEN}\"\\\n  -import-path . \\\n  -proto wgtwo/voicemail/v0/voicemail.proto \\\n  -d '{ \"to\": { \"e164\": \"+47xxxxxxxx\" } }' \\\n  api.wgtwo.com:443 \\\n  wgtwo.voicemail.v0.VoicemailMediaService.GetAllVoicemailMetadata\n"},{"file":"examples/kotlin/thirdpartydev/voicemail/src/main/kotlin/com/wgtwo/examples/thirdpartydev/voicemail/ListVoicemail.kt","content":"package com.wgtwo.examples.thirdpartydev.voicemail\n\nimport com.wgtwo.api.common.Environment\nimport com.wgtwo.api.common.v0.PhoneNumberProto\nimport com.wgtwo.api.util.auth.Channels\nimport com.wgtwo.api.util.auth.BearerToken\nimport com.wgtwo.api.voicemail.v0.VoicemailMediaServiceGrpc\nimport com.wgtwo.api.voicemail.v0.VoicemailProto\n\nprivate val credentials = BearerToken { \"MY_ACCESS_TOKEN\" } // Add your credentials\nprivate val phoneNumber = \"+47xxxxxxxx\" // Target your desired user\n\nprivate val channel = Channels.createChannel(Environment.PRODUCTION)\nprivate val stub = VoicemailMediaServiceGrpc.newBlockingStub(channel).withCallCredentials(credentials)\n\nfun main() {\n    val request = VoicemailProto.GetAllVoicemailMetadataRequest.newBuilder()\n        .setTo(\n            PhoneNumberProto.PhoneNumber.newBuilder()\n                .setE164(phoneNumber)\n                .build()\n        )\n        .build()\n    val response: VoicemailProto.GetAllVoicemailMetadataResponse = stub.getAllVoicemailMetadata(request)\n    val metadataList: List<VoicemailProto.VoicemailMetadata> = response.metadataList\n    when {\n        metadataList.isEmpty() -> println(\"No voicemails found\")\n        else -> metadataList.forEach { println(it) }\n    }\n}\n"},{"file":"examples/grpcurl/thirdpartydev/voicemail/play-voicemail.sh","content":"grpcurl \\\n  -H \"Authorization: Bearer ${ACCESS_TOKEN}\"\\\n  -import-path . \\\n  -proto wgtwo/voicemail/v0/voicemail.proto \\\n  -d '{ \"voicemail_id\": \"my-voicemail-id\" }' \\\n  api.wgtwo.com:443 \\\n  wgtwo.voicemail.v0.VoicemailMediaService.GetVoicemail \\\n  | jq -r .wav \\\n  | base64 -d \\\n  | tee voicemail.wav \\\n  | aplay # Linux\n"},{"file":"examples/kotlin/thirdpartydev/voicemail/src/main/kotlin/com/wgtwo/examples/thirdpartydev/voicemail/PlayVoicemail.kt","content":"package com.wgtwo.examples.thirdpartydev.voicemail\n\nimport com.wgtwo.api.common.Environment\nimport com.wgtwo.api.voicemail.v0.VoicemailMediaServiceGrpc\nimport com.wgtwo.api.voicemail.v0.VoicemailProto\nimport com.wgtwo.api.util.auth.Channels\nimport com.wgtwo.api.util.auth.BearerToken\nimport javax.sound.sampled.AudioInputStream\nimport javax.sound.sampled.AudioSystem\nimport javax.sound.sampled.Clip\nimport javax.sound.sampled.DataLine\n\nprivate val credentials = BearerToken { \"MY_ACCESS_TOKEN\" } // Add your credentials\nprivate val voicemailUuid = \"voicemail-uuid\" // Target voicemail to play\n\nprivate val channel = Channels.createChannel(Environment.PRODUCTION)\nprivate val stub = VoicemailMediaServiceGrpc.newBlockingStub(channel).withCallCredentials(credentials)\n\nfun main() {\n    val request = VoicemailProto.GetVoicemailRequest.newBuilder()\n        .setVoicemailId(voicemailUuid)\n        .build()\n    val voicemail = stub.getVoicemail(request)\n\n    val tempFile = createTempFile(prefix = \"voicemail-\", suffix = \".wav\")\n    val outputStream = tempFile.outputStream()\n    when (voicemail.bytesCase) {\n        VoicemailProto.GetVoicemailResponse.BytesCase.WAV -> voicemail.wav.writeTo(outputStream)\n        else -> throw IllegalStateException(\"Not supported: \" + voicemail.bytesCase)\n    }\n    outputStream.close()\n\n    val inputStream: AudioInputStream = AudioSystem.getAudioInputStream(tempFile)\n    val info = DataLine.Info(Clip::class.java, inputStream.format)\n    val clip = AudioSystem.getLine(info) as Clip\n    clip.open(inputStream)\n    clip.start()\n\n    // Wait for clip to stop playing\n    Thread.sleep(clip.microsecondLength / 1000)\n    clip.close()\n}\n"},{"file":"examples/grpcurl/thirdpartydev/voicemail/mark-voicemail-as-read.sh","content":"grpcurl \\\n  -H \"Authorization: Bearer ${ACCESS_TOKEN}\"\\\n  -import-path . \\\n  -proto wgtwo/voicemail/v0/voicemail.proto \\\n  -d '{ \"voicemail_id\": \"my-voicemail-id\" }' \\\n  api.wgtwo.com:443 \\\n  wgtwo.voicemail.v0.VoicemailMediaService.MarkVoicemailAsRead\n"},{"file":"examples/kotlin/thirdpartydev/voicemail/src/main/kotlin/com/wgtwo/examples/thirdpartydev/voicemail/MarkVoicemailAsRead.kt","content":"package com.wgtwo.examples.thirdpartydev.voicemail\n\nimport com.wgtwo.api.common.Environment\nimport com.wgtwo.api.voicemail.v0.VoicemailMediaServiceGrpc\nimport com.wgtwo.api.voicemail.v0.VoicemailProto\nimport com.wgtwo.api.util.auth.Channels\nimport com.wgtwo.api.util.auth.BearerToken\n\nprivate val credentials = BearerToken { \"MY_ACCESS_TOKEN\" } // Add your credentials\nprivate val voicemailUuid = \"voicemail-uuid\" // Target voicemail to mark as read\n\nprivate val channel = Channels.createChannel(Environment.PRODUCTION)\nprivate val stub = VoicemailMediaServiceGrpc.newBlockingStub(channel).withCallCredentials(credentials)\n\nfun main() {\n    val request = VoicemailProto.MarkVoicemailAsReadRequest.newBuilder()\n        .setVoicemailId(voicemailUuid)\n        .build()\n    stub.markVoicemailAsRead(request)\n}\n"},{"file":"examples/grpcurl/thirdpartydev/voicemail/delete-voicemail.sh","content":"grpcurl \\\n  -H \"Authorization: Bearer ${ACCESS_TOKEN}\"\\\n  -import-path . \\\n  -proto wgtwo/voicemail/v0/voicemail.proto \\\n  -d '{ \"voicemail_id\": \"my-voicemail-id\" }' \\\n  api.wgtwo.com:443 \\\n  wgtwo.voicemail.v0.VoicemailMediaService.DeleteVoicemail\n"},{"file":"examples/kotlin/thirdpartydev/voicemail/src/main/kotlin/com/wgtwo/examples/thirdpartydev/voicemail/DeleteVoicemail.kt","content":"package com.wgtwo.examples.thirdpartydev.voicemail\n\nimport com.wgtwo.api.common.Environment\nimport com.wgtwo.api.voicemail.v0.VoicemailMediaServiceGrpc\nimport com.wgtwo.api.voicemail.v0.VoicemailProto\nimport com.wgtwo.api.util.auth.Channels\nimport com.wgtwo.api.util.auth.BearerToken\n\nprivate val credentials = BearerToken { \"MY_ACCESS_TOKEN\" } // Add your credentials\nprivate val voicemailUuid = \"voicemail-uuid\" // Target voicemail to delete\n\nprivate val channel = Channels.createChannel(Environment.PRODUCTION)\nprivate val stub = VoicemailMediaServiceGrpc.newBlockingStub(channel).withCallCredentials(credentials)\n\nfun main() {\n    val request = VoicemailProto.DeleteVoicemailRequest.newBuilder()\n        .setVoicemailId(voicemailUuid)\n        .build()\n    stub.deleteVoicemail(request)\n}\n"},{"file":"examples/grpcurl/thirdpartydev/voicemail/reset-voicemail-greeting.sh","content":"grpcurl \\\n  -H \"Authorization: Bearer ${ACCESS_TOKEN}\"\\\n  -import-path . \\\n  -proto wgtwo/voicemail/v0/voicemail.proto \\\n  -d '{ \"subscriber\": { \"e164\": \"+47xxxxxxxx\" } }' \\\n  api.wgtwo.com:443 \\\n  wgtwo.voicemail.v0.VoicemailMediaService.ResetVoicemailGreeting\n"},{"file":"examples/kotlin/thirdpartydev/voicemail/src/main/kotlin/com/wgtwo/examples/thirdpartydev/voicemail/ResetVoicemailGreeting.kt","content":"package com.wgtwo.examples.thirdpartydev.voicemail\n\nimport com.wgtwo.api.common.Environment\nimport com.wgtwo.api.common.v0.PhoneNumberProto\nimport com.wgtwo.api.util.auth.Channels\nimport com.wgtwo.api.util.auth.BearerToken\nimport com.wgtwo.api.voicemail.v0.VoicemailMediaServiceGrpc\nimport com.wgtwo.api.voicemail.v0.VoicemailProto\n\nprivate val credentials = BearerToken { \"MY_ACCESS_TOKEN\" } // Add your credentials\nprivate val phoneNumber = \"+47xxxxxxxx\" // Target your desired user\n\nprivate val channel = Channels.createChannel(Environment.PRODUCTION)\nprivate val stub = VoicemailMediaServiceGrpc.newBlockingStub(channel).withCallCredentials(credentials)\n\nfun main() {\n    val request = VoicemailProto.ResetVoicemailGreetingRequest.newBuilder()\n        .setSubscriber(\n            PhoneNumberProto.PhoneNumber.newBuilder()\n                .setE164(phoneNumber)\n                .build()\n        )\n        .build()\n    stub.resetVoicemailGreeting(request)\n}\n"}]}},"context":{}}